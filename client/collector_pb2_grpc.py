# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import collector_pb2 as collector__pb2
import poplar_pb2 as poplar__pb2


class PoplarEventCollectorStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateCollector = channel.unary_unary(
        '/poplar.PoplarEventCollector/CreateCollector',
        request_serializer=poplar__pb2.CreateOptions.SerializeToString,
        response_deserializer=poplar__pb2.PoplarResponse.FromString,
        )
    self.SendEvent = channel.unary_unary(
        '/poplar.PoplarEventCollector/SendEvent',
        request_serializer=collector__pb2.EventMetrics.SerializeToString,
        response_deserializer=poplar__pb2.PoplarResponse.FromString,
        )
    self.StreamEvents = channel.stream_unary(
        '/poplar.PoplarEventCollector/StreamEvents',
        request_serializer=collector__pb2.EventMetrics.SerializeToString,
        response_deserializer=poplar__pb2.PoplarResponse.FromString,
        )
    self.CloseCollector = channel.unary_unary(
        '/poplar.PoplarEventCollector/CloseCollector',
        request_serializer=poplar__pb2.PoplarID.SerializeToString,
        response_deserializer=poplar__pb2.PoplarResponse.FromString,
        )


class PoplarEventCollectorServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def CreateCollector(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SendEvent(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamEvents(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CloseCollector(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PoplarEventCollectorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateCollector': grpc.unary_unary_rpc_method_handler(
          servicer.CreateCollector,
          request_deserializer=poplar__pb2.CreateOptions.FromString,
          response_serializer=poplar__pb2.PoplarResponse.SerializeToString,
      ),
      'SendEvent': grpc.unary_unary_rpc_method_handler(
          servicer.SendEvent,
          request_deserializer=collector__pb2.EventMetrics.FromString,
          response_serializer=poplar__pb2.PoplarResponse.SerializeToString,
      ),
      'StreamEvents': grpc.stream_unary_rpc_method_handler(
          servicer.StreamEvents,
          request_deserializer=collector__pb2.EventMetrics.FromString,
          response_serializer=poplar__pb2.PoplarResponse.SerializeToString,
      ),
      'CloseCollector': grpc.unary_unary_rpc_method_handler(
          servicer.CloseCollector,
          request_deserializer=poplar__pb2.PoplarID.FromString,
          response_serializer=poplar__pb2.PoplarResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'poplar.PoplarEventCollector', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
